name: Build
on:
  workflow_run:
    workflows: ["Run Tests"]
    branches: [main]
    types: 
      - completed
env:
  APP_NAME: game_cheetah
  CARGO_TERM_COLOR: always
jobs:
  build_linux:
   runs-on: ubuntu-latest
   steps:
   - uses: actions/checkout@v4
   - name: Install gtk
     run: |
       sudo apt-get update
       sudo apt-get install build-essential libgtk-3-dev libasound2-dev libxcb-shape0-dev libxcb-xfixes0-dev
   - name: Install cargo deb & get
     run: |
       cargo install cargo-deb
       cargo install cargo-get
   - name: Build deb
     id: build-deb
     run: |
       export VERSION=$(cargo get version)
       echo "VERSION=$VERSION" >> $GITHUB_ENV
       export DEB=$(cargo deb)
       echo "Copy $DEB to ${{ env.APP_NAME }}_${VERSION}_amd64.deb"
       mv $DEB ${{ env.APP_NAME }}_${VERSION}_amd64.deb
       sed "s/#VERSION/$VERSION/g" <build/file_id.diz  >file_id.diz
   - name: 'Upload Artifact'
     uses: actions/upload-artifact@v4
     with:
       name: ${{ env.APP_NAME }}_linux_${{ env.VERSION }}
       path: |
         ${{ env.APP_NAME }}_${{ env.VERSION }}_amd64.deb
         file_id.diz
   - name: Build AppImage
     id: build-appimage
     run: |
       wget https://github.com/AppImage/appimagetool/releases/download/continuous/appimagetool-x86_64.AppImage
       chmod +x appimagetool-x86_64.AppImage
       mkdir -p ${{ env.APP_NAME }}-appimage/usr/bin
       cp build/linux/256x256.png ${{ env.APP_NAME }}-appimage/${{ env.APP_NAME }}.png
       cp build/linux/${{ env.APP_NAME }}.desktop ${{ env.APP_NAME }}-appimage/
       cp target/release/${{ env.APP_NAME }} ${{ env.APP_NAME }}-appimage/usr/bin/
       echo "#!/bin/bash" > ${{ env.APP_NAME }}-appimage/AppRun
       echo "exec \"\$(dirname \"\$0\")/usr/bin/${{ env.APP_NAME }}\" \"\$@\"" >> ${{ env.APP_NAME }}-appimage/AppRun
       chmod a+x ${{ env.APP_NAME }}-appimage/AppRun

       export app_img=$(python3 tools/get_app_img.py "${{ env.APP_NAME }}" "${{ env.VERSION }}" x86_64)
       echo "APP_IMG=$app_img" >> $GITHUB_ENV

       ./appimagetool-x86_64.AppImage "${{ env.APP_NAME }}-appimage" "$app_img"
   - name: 'Upload AppImage'
     uses: actions/upload-artifact@v4
     with:
      name: ${{ env.APP_IMG }}
      path: ${{ env.APP_IMG }}
  build_windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
    - name: Build exe
      run: |
        cargo build --release
    - name: Install WiX
      run: dotnet tool install --global wix --version 4.0.1
    - name: Create PFX certificate
      id: create-pfx
      shell: pwsh
      env:
        PFX_CONTENT: ${{ secrets.WINDOWS_CERTIFICATE_BASE64 }}
      run: |
        $encodedBytes=[System.Convert]::FromBase64String($env:PFX_CONTENT);
        Set-Content "./cert.pfx" -Value $encodedBytes
        $VERSION=$(cargo pkgid | foreach-object { $_ -replace '(.*)#','' })
        echo "Version: $VERSION"
        Add-Content -Path $env:GITHUB_ENV -Value "VERSION=$VERSION"
        get-content .\build\file_id.diz | %{$_ -replace "#VERSION","$VERSION"} >file_id.diz        
    - name: Build MSI installer.
      run: |
        echo "Building ${{ env.VERSION }} installerâ€¦"
        wix extension add WixToolset.UI.wixext WixToolset.Util.wixext
        wix build -arch "x64" -ext WixToolset.UI.wixext -ext WixToolset.Util.wixext -d "PATH=./cert.pfx" -d "VERSION=${{ env.VERSION }}"  -out "./${{ env.APP_NAME }}-${{ env.VERSION }}-installer.msi" "build/windows/installer.wxs"
    - name: Delete PFX certificate
      run: del "./cert.pfx"
    - name: 'Upload Artifact'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.APP_NAME }}_${{ env.VERSION }}_windows
        path: |
          ${{ env.APP_NAME }}-${{ env.VERSION }}-installer.msi
          file_id.diz
  
  build_mac:
    strategy:
      matrix:
        target: [aarch64-apple-darwin, x86_64-apple-darwin]
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v4
      - name: Install cargo bundle & get
        run: |
          rustup target add aarch64-apple-darwin
          rustup target add x86_64-apple-darwin
          cargo install cargo-bundle
          brew install create-dmg
          git submodule update --init
      - name: Build app
        run: |
          cd crates/${{ env.APP_NAME }}
          cargo build --release --target aarch64-apple-darwin
          cargo build --release --target x86_64-apple-darwin
          cd ../..

          export app=$(python3 tools/get_name.py "${{ env.APP_NAME }}")
          echo "Build bundle for: $app"
          echo "APP=$app" >> $GITHUB_ENV

          echo "Creating dir '$app.app/Contents/MacOS'"
          mkdir -p "$app.app/Contents/MacOS"
          echo "Creating dir '$app.app/Contents/Resources'"
          mkdir -p "$app.app/Contents/Resources"

          cp crates/${{ env.APP_NAME }}/build/mac/Info.plist "${app}.app/Contents/Info.plist"

          mkdir -p AppIcon.iconset
          sips -z 16 16 crates/${{ env.APP_NAME }}/build/mac/128x128@2x.png --out AppIcon.iconset/icon_16x16.png
          sips -z 32 32 crates/${{ env.APP_NAME }}/build/mac/128x128@2x.png --out AppIcon.iconset/icon_16x16@2x.png
          sips -z 32 32 crates/${{ env.APP_NAME }}/build/mac/128x128@2x.png --out AppIcon.iconset/icon_32x32.png
          sips -z 64 64 crates/${{ env.APP_NAME }}/build/mac/128x128@2x.png --out AppIcon.iconset/icon_32x32@2.png
          sips -z 128 128 crates/${{ env.APP_NAME }}/build/mac/128x128@2x.png --out AppIcon.iconset/icon_128x128.png
          cp crates/${{ env.APP_NAME }}/build/mac/128x128@2x.png AppIcon.iconset/icon_128x128@2x.png
          iconutil -c icns AppIcon.iconset
          cp AppIcon.icns "$app.app/Contents/Resources"
          
          export version=$(python3 tools/prep_diz.py "${{ env.APP_NAME }}" "file_id.diz")
          echo "VERSION=$version" >> $GITHUB_ENV
          echo "Version: $version"

          echo "Creating universal binary $app.app/Contents/MacOS/${{ env.APP_NAME }}"
          lipo "target/x86_64-apple-darwin/release/${{ env.APP_NAME }}" \
               "target/aarch64-apple-darwin/release/${{ env.APP_NAME }}" \
               -create -output "$app.app/Contents/MacOS/${{ env.APP_NAME }}"

      - name: Sign dmg
        id: sign-bundle
        run: |
          create-dmg \
            --volname "${{ env.APP }} Installer" \
            --volicon "AppIcon.icns" \
            --window-pos 200 120 \
            --window-size 800 400 \
            --icon-size 128 \
            --hide-extension "${{ env.APP }}.app" \
            --app-drop-link 600 185 \
            "${{ env.APP_NAME }}-${{ env.VERSION }}-universal.dmg" \
            "${{ env.APP }}.app"
      - name: 'Upload dmg'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}_osx_${{ env.VERSION }}${{ matrix.target }}
          path: |
            ${{ env.APP_NAME }}-${{ env.VERSION }}-universal.dmg
            file_id.diz